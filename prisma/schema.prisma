generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URI")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  Courses       Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Course {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  image     String?
  content   Json?

  chapters Chapter[]
  user     User      @relation(fields: [userId], references: [id])
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  quizes    Quiz[]

  Course Course @relation(fields: [courseId], references: [id])
}

model Quiz {
  id        String     @id @default(cuid())
  chapterId String
  createdAt DateTime   @default(now())
  questions Question[]

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId], name: "chapterId")
}

model Question {
  id         String   @id @default(cuid())
  quizId     String
  question   String   @db.Text
  answer     String   @db.Text
  options    Json
  source     String   @db.Text
  isCorrect  Boolean?
  userAnswer String?

  game Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId], name: "quizId")
}
